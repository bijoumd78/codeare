/*
 *  jrrs Copyright (C) 2007-2010 Kaveh Vahedipour
 *                               Forschungszentrum Juelich, Germany
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but 
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
 *  02110-1301  USA
 */
 
#ifndef __LOADER_H__
#define __LOADER_H__


#include <string.h>
#include <cstdlib>
#include <iostream>

// Thus far only cl.exe and g++
#if defined(_MSC_VER)
    #include <windows.h>
#elif defined(__GNUC__)
    #include <dlfcn.h>
#else
    #error Unknown compiler
#endif


/**
 * @brief         Load module
 *
 * @param  name   Module name
 * @return        RAM address
 */ 
void* 
LoadModule        (char* name) {

	void* handle = 0;
	
    #if defined(_MSC_VER) 

	    name = strcat (name, ".dll");
		std::cout << "Loading library ... " << name << std::endl;

	    handle = (void*)LoadLibrary(name);
		
		if (!handle) 
			std::cerr << "... FAILED! Cannot open " << name << std::endl;
		else
			std::cout << "... done.\n" << std::endl;


    #elif defined(__GNUC__) 

		std::string fname = std::string("@prefix@/lib/") + std::string(name) + std::string(".so");

		std::cout << "Loading library ... " << fname.c_str() << std::endl;

		handle = dlopen ((fname).c_str(), RTLD_NOW);

		const char* err = dlerror();

		if (err)
			std::cerr << "Cannot open " << err << std::endl;
		else
			std::cout << "... done.\n" << std::endl;
		
    #endif

	return handle;

}


/**
 * @brief         Get exported function from module
 *
 * @param  handle Handle on module
 * @param  name   Function name
 */
void*
GetFunction       (void* handle, char* name) {

	void* fnptr = 0;
	
    #if defined(_MSC_VER)

	    fnptr = (void*) GetProcAddress((HINSTANCE)handle, name);

    #elif defined(__GNUC__)

		const char* err = dlerror();
	    fnptr = dlsym (handle, name);
		if (err) 
			std::cerr << "Cannot load symbol " << name << ": " << err << std::endl;

    #endif

	return fnptr;

}


/**
 * @brief         Close module
 *
 * @param  handle Handle on module
 * @return        Success
 */
bool 
CloseModule       (void* handle) {

    #if defined(_MSC_VER)
        return FreeLibrary((HINSTANCE)handle);
    #elif defined(__GNUC__)
        return dlclose(handle);
		const char* err = dlerror();
		if (err) 
			std::cerr << "Cannot unload: " << err << std::endl;
    #endif
    
    return true;

}

#endif // __LOADER_H__

/*
 *  codeare Copyright (C) 2007-2010 Kaveh Vahedipour
 *                               Forschungszentrum Juelich, Germany
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but 
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
 *  02110-1301  USA
 */
 
#ifndef __LOADER_H__
#define __LOADER_H__


#include <string.h>
#include <cstdlib>
#include <iostream>

// Thus far only cl.exe and g++
#if defined(_MSC_VER)
#    include <windows.h>
#    define LIB_SUFFIX ".dll"
#else
#    include <dlfcn.h>
#    define LIB_SUFFIX ".so"
#endif


/**
 * @brief         Load module
 *
 * @param  name   Module name
 * @return        RAM address
 */ 
void*  LoadModule        (char* name) {

    void* handle = 0;
    char* error;
    std::string fname = std::string(name) + std::string(LIB_SUFFIX);

    std::cout << "Loading library ... " << fname << std::endl;
    
#if defined(_MSC_VER) 
    handle = (void*) LoadLibrary(name);
#else 
    dlerror();
    handle = dlopen (fname.c_str(), RTLD_NOW);
    error = dlerror();
#endif
    
    if (NULL == handle) 
        std::cerr << "... FAILED!\n" << error << std::endl;
    else
        std::cout << "... done.\n" << std::endl;
    
	return handle;

}


/**
 * @brief         Get exported function from module
 *
 * @param  handle Handle on module
 * @param  name   Function name
 */
void* GetFunction       (void* handle, char* name) {

	void* fnptr = 0;
	char* error = 0;
    
#if defined(_MSC_VER)
    fnptr = (void*) GetProcAddress ((HINSTANCE)handle, name);
#else
    dlerror();    
    fnptr = dlsym (handle, name);
    error = dlerror();
#endif
    
    if (!fnptr)  
        std::cerr << "Cannot load symbol " << name << ": " << error << std::endl;

	return fnptr;
    
}


/**
 * @brief         Close module
 *
 * @param  handle Handle on module
 * @return        Success
 */
bool  CloseModule  (void* handle) {

#if defined(_MSC_VER)
    try  {
        if (!FreeLibrary(handle))
            fprintf(stderr, "Cannot unload library. Error Code: %02X\n. Attempting to unmap...", GetLastError());
        if (!UnmapViewOfFile(handle))
            fprintf(stderr, "Couldn't unmap the file! Error Code: %02X\n", GetLastError());
    } catch (const std::exception&) {}   
#else
    dlerror (); // Clear last errors
    dlclose(handle);
    const char* error = dlerror();
    if (error) 
        std::cerr << "Cannot unload: " << error << std::endl;
#endif
    
    return true;

}

#endif // __LOADER_H__

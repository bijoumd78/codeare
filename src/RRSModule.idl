/*
 *  jrrs Copyright (C) 2007-2010 Kaveh Vahedipour
 *                               Forschungszentrum JÃ¼lich, Germany
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but 
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
 *  02110-1301  USA
 */

#ifndef __RRS_MODULE_IDL__
#define __RRS_MODULE_IDL__

/**
 * @brief Remote recon service module
 */
module RRSModule {


	#include "common.h"

	typedef sequence<float>  floats;   /*!< raw data real or imaginary repositories */
	typedef sequence<double> doubles;  /*!< helper data                             */
	typedef sequence<short>  shorts;   /*!< pixel data repositories                 */
	typedef sequence<long>   longs;    /*!< dimension reositories                   */


	/**
	 * @brief Complex data
	 */
	struct    cplx_data         {
		
		floats vals;  /**< Data chain of real/imag */
		longs  dims;  /**< Dimesions     */
		floats res;   /**< Resolution     */

	};


	/**
	 * @brief Real data
	 */
	struct     real_data       {

		doubles vals;  /**< Data      */
		longs   dims;  /**< Dimesions */
		floats  res;   /**< Resolution     */

	};


	/**
	 * @brief Pixel data
	 */
	struct     pixel_data       {

		shorts vals;  /**< Data      */
		longs  dims;  /**< Dimesions */
		floats res;   /**< Resolution     */

	};


	/**
	 * @brief Remote recon service interface definition
	 */
	interface RRSInterface {
		
		/**
		 * @brief         Process data
		 *                Process data according to a particular method
		 *
		 * @param  s      Id of initialised reconstruction algorithm
		 * @return        Status
		 */
		error_code        Process (in short s);
		
		/**
		 * @brief         Finalise
		 *                Clear data. Unload library.
		 *
		 * @param  s      Id of initialised reconstruction algorithm
		 * @return        Status
		 */
		error_code        Finalise (in short s);
		
		/**
		 * @brief         Finalise
		 *                Clear data. Unload library.
		 *
		 * @param  s      Id of initialised reconstruction algorithm
		 * @return        Status
		 */
		error_code        Prepare (in short s);
		
		/**
		 * @brief         Intialise
		 *                Initilise process library
		 *
		 * @param  name   Name of recontruction method
		 * @return        Status
		 */
		short             Init (in string name);
		

		/**
		 * @brief         Transport complex matrix from backend identified by ...
		 *
		 * @param  name   its name
		 * @param  data   Data matrix
		 */ 
		void              get_cplx (in string name, inout cplx_data data);

		
		/**
		 * @brief         Transport and announce complex matrix to backend
		 *
		 * @param  name   Name
		 * @param  data   Data matrix
		 */ 
		void              set_cplx (in string name, in cplx_data data);

		
		/**
		 * @brief         Transport real matrix from backend identified by ...
		 *
		 * @param  name   its name
		 * @param  data   Data matrix
		 */ 
		void              get_real (in string name, inout real_data data);

		
		/**
		 * @brief         Transport and announce real matrix to backend
		 *
		 * @param  name   Name
		 * @param  data   Data matrix
		 */ 
		void              set_real (in string name, in real_data data);

		
		/**
		 * @brief         Transport pixel matrix from backend identified by ...
		 *
		 * @param  name   its name
		 * @param  data   Data matrix
		 */ 
		void              get_pixel (in string name, inout pixel_data data);

		
		/**
		 * @brief         Transport and announce pixel matrix to backend
		 *
		 * @param  name   Name
		 * @param  data   Data matrix
		 */ 
		void              set_pixel (in string name, in pixel_data data);

		
		/**
		 * @brief         Declare attributes labels and values.
		 */
		attribute         string       config;
		
		
	};
	
};

#endif
